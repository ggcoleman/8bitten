name: 8Bitten Quality Gate

on:
  pull_request:
    branches: [ develop, main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  push:
    branches: [ develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  constitutional-compliance:
    name: Constitutional Compliance Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run unit tests (TDD Principle)
      run: dotnet test --no-build --configuration Release --logger trx --results-directory TestResults/

    - name: Check test coverage
      run: |
        dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"
        # Ensure >90% coverage for core components, >95% for research features

    - name: Validate component architecture
      run: |
        # Check for proper separation of concerns
        # Validate interface contracts
        # Ensure minimal dependencies between components
        echo "Validating component-based architecture..."

    - name: Performance benchmark
      run: |
        # Run performance tests to ensure 60 FPS target
        # Validate <16.67ms input latency
        # Check memory usage <100MB
        echo "Running performance benchmarks..."

    - name: .NET Standard compliance
      run: |
        # Verify .NET Standard 2.1 compatibility
        # Check for modern C# feature usage
        # Validate coding conventions
        echo "Checking .NET Standard compliance..."

  accuracy-validation:
    name: Emulation Accuracy Validation
    runs-on: ubuntu-latest
    needs: constitutional-compliance
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build emulator
      run: |
        dotnet restore
        dotnet build --configuration Release

    - name: Download Blargg test ROMs
      run: |
        # Download and cache Blargg's test ROM suite
        # These are public domain test ROMs for emulator validation
        mkdir -p TestROMs/Blargg
        echo "Downloading Blargg test ROMs..."

    - name: Run CPU accuracy tests
      run: |
        # Execute Blargg CPU test ROMs
        # Validate cycle-accurate timing
        # Check instruction implementation
        echo "Running CPU accuracy validation..."

    - name: Run PPU accuracy tests
      run: |
        # Execute PPU test ROMs
        # Validate scanline timing
        # Check sprite evaluation
        echo "Running PPU accuracy validation..."

    - name: Run APU accuracy tests
      run: |
        # Execute audio test ROMs
        # Validate sound generation
        # Check channel mixing
        echo "Running APU accuracy validation..."

    - name: Hardware reference comparison
      run: |
        # Compare against documented hardware behavior
        # Validate timing against NESdev Wiki specifications
        # Check edge case handling
        echo "Comparing against hardware references..."

  research-standards:
    name: Research-Grade Standards
    runs-on: ubuntu-latest
    needs: constitutional-compliance
    if: contains(github.head_ref, 'research') || contains(github.head_ref, '006-research') || contains(github.head_ref, '007-speedrun')
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build solution
      run: |
        dotnet restore
        dotnet build --configuration Release

    - name: Validate deterministic replay
      run: |
        # Test deterministic execution
        # Validate replay accuracy
        # Check cross-platform consistency
        echo "Validating deterministic replay..."

    - name: Test metrics collection
      run: |
        # Validate metrics accuracy
        # Check data export formats
        # Test statistical analysis
        echo "Testing metrics collection..."

    - name: Validate data export formats
      run: |
        # Test CSV, JSON, HDF5 export
        # Validate scientific data formats
        # Check metadata completeness
        echo "Validating data export formats..."

    - name: Statistical analysis validation
      run: |
        # Test confidence interval calculations
        # Validate significance testing
        # Check error bound calculations
        echo "Validating statistical analysis..."

  commit-message-validation:
    name: Commit Message Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate commit messages
      run: |
        # Check commit message format
        # Validate type and scope
        # Ensure clear descriptions
        echo "Validating commit message format..."
        
        # Get commits in this PR
        git log --format="%s" origin/develop..HEAD | while read commit_msg; do
          if [[ ! "$commit_msg" =~ ^(feat|fix|docs|test|refactor|perf|research|validate)\([a-z-]+\):\ .+ ]]; then
            echo "❌ Invalid commit message format: $commit_msg"
            echo "Expected: type(scope): description"
            echo "See docs/development/commit-message-guide.md"
            exit 1
          else
            echo "✅ Valid commit message: $commit_msg"
          fi
        done

  documentation-check:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check documentation updates
      run: |
        # Ensure API changes include documentation updates
        # Validate markdown formatting
        # Check for broken links
        echo "Checking documentation completeness..."

    - name: Validate API documentation
      run: |
        # Check that public APIs are documented
        # Validate code examples
        # Ensure research guides are current
        echo "Validating API documentation..."

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: develop
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_CSHARP: true
        VALIDATE_MARKDOWN: true
        VALIDATE_YAML: true

  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [constitutional-compliance, accuracy-validation, commit-message-validation, documentation-check, security-scan]
    if: always()
    steps:
    - name: Check all jobs status
      run: |
        echo "Quality Gate Results:"
        echo "===================="
        echo "Constitutional Compliance: ${{ needs.constitutional-compliance.result }}"
        echo "Accuracy Validation: ${{ needs.accuracy-validation.result }}"
        echo "Commit Messages: ${{ needs.commit-message-validation.result }}"
        echo "Documentation: ${{ needs.documentation-check.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.constitutional-compliance.result }}" != "success" ]] || 
           [[ "${{ needs.accuracy-validation.result }}" != "success" ]] || 
           [[ "${{ needs.commit-message-validation.result }}" != "success" ]] || 
           [[ "${{ needs.documentation-check.result }}" != "success" ]] || 
           [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "❌ Quality gate FAILED"
          echo "Please address the failing checks before merging."
          exit 1
        else
          echo "✅ Quality gate PASSED"
          echo "All checks successful - ready for merge!"
        fi
