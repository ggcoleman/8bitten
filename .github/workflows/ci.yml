name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore

    - name: Run unit tests
      run: dotnet test tests/Unit/ --configuration ${{ matrix.configuration }} --no-build --verbosity normal --collect:"XPlat Code Coverage"

    - name: Run integration tests
      run: dotnet test tests/Integration/ --configuration ${{ matrix.configuration }} --no-build --verbosity normal

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.configuration == 'Release'
      uses: codecov/codecov-action@v3
      with:
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: true

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run code analysis
      run: dotnet build --configuration Release --verbosity normal

    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive
        dotnet list package --deprecated

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run performance tests
      run: dotnet test tests/Performance/ --configuration Release --no-build --logger trx --results-directory TestResults

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: TestResults/

  package:
    name: Package Artifacts
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Create packages
      run: |
        dotnet pack src/Core/ --configuration Release --no-build --output ./packages
        dotnet pack src/Infrastructure/ --configuration Release --no-build --output ./packages
        dotnet pack src/Interfaces/ --configuration Release --no-build --output ./packages

    - name: Publish executables
      run: |
        dotnet publish src/Emulator.Console/Headless/ --configuration Release --no-build --output ./publish/headless
        dotnet publish src/Emulator.Console/CLI/ --configuration Release --no-build --output ./publish/cli
        dotnet publish src/Emulator.Console/GUI/ --configuration Release --no-build --output ./publish/gui

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: packages/

    - name: Upload executables
      uses: actions/upload-artifact@v4
      with:
        name: executables
        path: publish/
